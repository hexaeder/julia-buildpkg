name: 'Run Pkg.build'
description: 'Run the build step in a Julia package'
author: 'David Anthoff'

branding:
  icon: 'box'
  color: 'gray-dark'

inputs:
  project:
    description: 'Value passed to the --project flag. The default value is the repository root: "@."'
    default: '@.'
  precompile:
    description: 'Whether to allow auto-precompilation (via the `JULIA_PKG_PRECOMPILE_AUTO` env var). Options: yes | no. Default value: no.'
    default: 'no'
  localregistry:
    description: 'Add local registries hosted on GitHub. Specified by providing the url (https/ssh) to the repositories as a newline (\n) seperated list.
                  User is responsible for setting up the necessary SSH-Keys to access the repositories if necessary.'
    default: ''
  git_cli:
    description: 'Determine if Pkg uses the cli git executable (Julia >= 1.7). Might be necessary for more complicated SSH setups.
                  Options: true | false. Default : false'
    default: 'false'
  ignore-no-cache:
    description: 'Whether to ignore if there appears to be no depot caching. Silences an action notice recommending `julia-actions/cache`.'
    default: 'false'

runs:
  using: 'composite'
  steps:
  - name: Set and export registry flavor preference
    run: echo "JULIA_PKG_SERVER_REGISTRY_PREFERENCE=${JULIA_PKG_SERVER_REGISTRY_PREFERENCE:-eager}" >> ${GITHUB_ENV}
    shell: bash
  - run: |
      if "${{ inputs.ignore-no-cache }}" == "false" && !isdir(DEPOT_PATH[1])
          println("::notice title=[julia-buildpkg] Caching of the julia depot was not detected ::Consider using `julia-actions/cache` to speed up runs https://github.com/julia-actions/cache To ignore, set input `ignore-no-cache: true` ")
      end
      import Pkg

      # Determine if Pkg uses git-cli executable instead of LibGit2
      VERSION >= v"1.7-" && (ENV["JULIA_PKG_USE_CLI_GIT"] = ${{ inputs.git_cli }})

      if VERSION < v"1.7-" && ${{ inputs.git_cli }} == true
        printstyled("::notice::JULIA_PKG_USE_CLI_GIT requires Julia >= 1.7. Using default LibGit2 git-interface instead! \n"; color = :yellow)
      end


      if VERSION >= v"1.5-"
          if VERSION >= v"1.8-"
              # Install the default registries
              Pkg.Registry.add()
          else
              Pkg.Registry.add("General")
          end

          # If provided add local registries
          if !isempty("${{ inputs.localregistry }}")
            local_repos = split("${{ inputs.localregistry }}", "\n") .|> string
            for repo_url in local_repos
              isempty(repo_url) && continue
              Pkg.Registry.add(Pkg.RegistrySpec(; url = repo_url))
            end
          end
      end

      # resolve before adding
      Pkg.resolve()
      # set up specific versions from PR if available
      if haskey(ENV, "GITHUB_REF") && contains(ENV["GITHUB_REF"], "pull")
          try
              pr_match = match(r"refs/pull/(\d+)/", ENV["GITHUB_REF"])
              pr_number = pr_match.captures[1]
              pr_body = strip(read(`gh pr view $pr_number --repo $(ENV["GITHUB_REPOSITORY"]) --json body --jq .body`, String))

              # Extract pkg code block
              pkg_match = match(r"```pkg\s*\n(.*?)\n```"ms, pr_body)
              if pkg_match !== nothing
                  versionstrings = split(strip(pkg_match.captures[1]), '\n')

                  specs = Pkg.PackageSpec[]
                  for pkg_str in versionstrings

                      pkg_str = strip(pkg_str)
                      isempty(pkg_str) && continue

                      rev_match = match(r"(.*)#(.*)", pkg_str)
                      if !isnothing(rev_match)
                          name, rev = rev_match.captures
                          push!(specs, Pkg.PackageSpec(; name, rev))
                          continue
                      end
                      version_match = match(r"(.*)@(.*)", pkg_str)
                      if !isnothing(version_match)
                          name, version = version_match.captures
                          push!(specs, Pkg.PackageSpec(; name, version=string(version)))
                          continue
                      end
                  end

                  # apply versions
                  manifest_packages = [spec.name for spec in values(Pkg.dependencies())]
                  applicable_specs = filter(spec -> spec.name in manifest_packages, specs)
                  if !isempty(applicable_specs)
                      @info "Add specific version for packages" applicable_specs
                      Pkg.add(applicable_specs)

                      # fix compat of all manually specified packages
                      fixed_pkg_names = [spec.name for spec in applicable_specs]
                      # get "info" for all fixed (i.e. contains current version)
                      fixed_pkg_info = [info for info in values(Pkg.dependencies()) if info.name âˆˆ fixed_pkg_names]
                      for info in fixed_pkg_info
                          Pkg.compat(info.name, string("~", info.version))
                      end
                  end
              end
          catch e
              @info "Skipped adding specific Versions because of error" e
          end
      end

      VERSION >= v"1.1.0-rc1" ? retry(Pkg.build)(verbose=true) : retry(Pkg.build)()
    shell: julia --color=yes --project=${{ inputs.project }} {0}
    env:
      JULIA_PKG_PRECOMPILE_AUTO: "${{ inputs.precompile }}"
      GITHUB_TOKEN: ${{ github.token }}
